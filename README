# Secure Image Steganography

A robust, feature-rich desktop application for hiding secret messages within images using advanced steganography and strong AES-256 encryption. This tool provides a secure and intuitive way to protect your private communications.

---

## Key Features

* **Strong Encryption:** Messages are secured with **AES-256 encryption** before being hidden. A key is derived from your password using **PBKDF2 with 100,000 iterations** to protect against brute-force attacks.
* **LSB Steganography:** Uses the Least Significant Bit (LSB) technique to embed data invisibly within the image pixels without any noticeable change in quality.
* **Modern & Intuitive GUI:** A clean, professional user interface built with a dark theme, featuring a balanced two-column layout and large, clear navigation tabs.
* **Drag & Drop:** Easily load images by dragging them from your file explorer directly into the application window.
* **Live Message Size Indicator:** The UI shows you the maximum data capacity of your chosen image and tracks your message size in real-time.
* **High Performance:** The decoding algorithm is highly optimized to quickly check even large, high-resolution images for hidden messages.
* **Cross-Platform:** Built with standard libraries to run on Windows, macOS, and Linux.

---

## Screenshots

*(You can add your own screenshots here to show off the final design)*

| Encrypt Tab | Decrypt Tab (with Result) |
| :---: | :---: |
| ** | ** |

---

## Technologies Used

* **Language:** Python
* **GUI:** Tkinter, ttkbootstrap, tkinterdnd2
* **Core Logic:** OpenCV, NumPy
* **Encryption:** Cryptography

---

## Installation & Setup

To run this application on your local machine, follow these steps:

1.  **Clone or Download the Repository**
    ```bash
    # If you are using Git
    git clone https://github.com/sh4dowkey/STEGANOGRAPHY.git
   cd STEGANOGRAPHY
    ```
    Or, simply ensure all the project files are in a folder named `STEGANOGRAPHY`.

2.  **Create a Python Virtual Environment**
    It's highly recommended to use a virtual environment to manage project dependencies.
    ```bash
    # Create the environment
    python -m venv venv

    # Activate the environment
    # On Windows:
    .\venv\Scripts\activate
    # On macOS/Linux:
    source venv/bin/activate
    ```

3.  **Install the Required Libraries**
    All dependencies are listed in the `requirements.txt` file.
    ```bash
    pip install -r requirements.txt
    ```

---

## How to Use

1.  **Launch the Application**
    Make sure your virtual environment is activated, then run the `main.py` file:
    ```bash
    python main.py
    ```

2.  **To Encrypt:**
    * Select the **Encrypt** tab.
    * Drag & drop an image or use the "Open Image" button.
    * Type your secret message in the text area.
    * Enter a strong password.
    * Click "Encrypt & Save Image" and choose a location to save your new image (as a `.png` file).

3.  **To Decrypt:**
    * Select the **Decrypt** tab.
    * Load the encrypted `.png` image.
    * Enter the correct password.
    * Click "Decrypt & Reveal". The hidden message will appear in the text area below.

---

## Project Structure

The code is organized into a clean, modular structure for better maintainability:

SteganoApp/
├── main.py
├── requirements.txt
│
└── app/
    ├── __init__.py
    ├── core.py
    └── gui.py